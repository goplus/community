import (
	"context"
	"time"
	"os"
	"io"
	"net/http"
	"fmt"
	"strconv"

	"github.com/goplus/community/internal/core"
	"github.com/goplus/community/markdown"
	"github.com/goplus/community/translation"
	"github.com/casdoor/casdoor-go-sdk/casdoorsdk"
	language "golang.org/x/text/language"
	_ "github.com/joho/godotenv/autoload"
	"github.com/qiniu/x/xlog"
)

var (
	community *core.Community
	trans *translation.Engine
)

const (
    layoutUS  = "January 2, 2006"
)

todo := context.TODO()
endpoint := os.Getenv("GOP_COMMUNITY_ENDPOINT")
domain := os.Getenv("GOP_COMMUNITY_DOMAIN")
xLog := xlog.New("")

// Modify / to /static
// Support 404 handle
static "/static"

get "/success", ctx => {
	ctx.yap "2xx", {}
}

get "/error", ctx => {
	ctx.yap "4xx", {}
}

get "/failed", ctx => {
	ctx.yap "5xx", {}
}

get "/demo", ctx => {
	ctx.yap "demo", {}
}

get "/p/:id", ctx => {
	// todo middleware
	// Get User Info
	var user *core.User
	token, err := ctx.Request.Cookie("token")
	if err == nil {
		user, err = community.getUser(token.Value)
		if err != nil {
			xLog.Error("get user error:", err)
		}
	}

	id := ctx.param("id")
	article, _ := community.article(todo, id)
	ctx.yap "article", {
		"User": user,
		"ID":      id,
		"Title":   article.Title,
		"Content": article.HtmlUrl,
		"Tags": article.Tags,
		"Cover": article.Cover,
		"Mtime": article.Mtime.Format(layoutUS),
		"Author": article.User,
		// "User": article.User,
	}
}

get "/getArticle/:id", ctx => {
	id := ctx.param("id")
	article, _ := community.article(todo, id)
	ctx.json {
		"code": 200,
		"data": article,
   }
   }

get "/user/:id", ctx => {
	id := ctx.param("id")
	// Get current User Info by id
	userClaim, err := community.getUserClaim(id)
	if err != nil {
		xLog.Error("get current user error:", err)
	}
	// todo middleware
	// get user by token
	var user *core.User
	token, err := ctx.Request.Cookie("token")
	if err == nil {
		user, err = community.getUser(token.Value)
		if err != nil {
			xLog.Error("get user error:", err)
		}
	}
	// get article list published by uid
	items, _ :=community.GetArticlesByUid(todo, id)
	ctx.yap "user", {
		"Id": id,
		"CurrentUser": userClaim,
		"User": user,
		"Items": items,
	}
}

get "/add", ctx => {
	ctx.yap "edit", {}
}

get "/", ctx => {
	// from := ctx.param("from")
	from := ctx.param("page")
	limit := ctx.param("limit")
	// todo middleware
	// Get User Info
	var user *core.User
	token, err := ctx.Request.Cookie("token")
	if err == nil {
		user, err = community.getUser(token.Value)
		if err != nil {
			xLog.Error("get user error:", err)
		}
	}

	page, err := strconv.Atoi(from)
	if err != nil {
		page = 1
	}

	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		limitInt = 20
	}
	// Get Article Info
	articles, next, _ := community.articles(todo, page, limitInt, "")
	ctx.yap "home", {
		"User":  user,
		"Items": articles,
		"Next": next,
	}
}

get "/search", ctx => {
	searchValue := ctx.param("value")
	if searchValue == "" {
		ctx.json {
			"code": 400,
			"err": "value can not be ''.",
		}
	}

	from := ctx.param("page")
	limit := ctx.param("limit")
	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		limitInt = 10
	}
	page, err := strconv.Atoi(from)
	if err != nil {
		page = 1
	}
	
	// todo middleware
	var user *core.User
	token, err := ctx.Request.Cookie("token")
	if err == nil {
		user, err = community.getUser(token.Value)
		if err != nil {
			xLog.Error("get user error:", err)
		}
	}

	articles, _ := community.searchArticle(todo, searchValue)
	articles, total, _ := community.articles(todo, page, limitInt, searchValue)
	ctx.yap "home", {
		"User":  user,
		"Items": articles,
		"Total": total,
		"Value": searchValue,
	}
}

get "/edit/:id", ctx => {
	token, err := ctx.Request.Cookie("token")
	if err != nil {
		ctx.json {
			"code": 500,
			"err": "no token",
		}
	}

	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(),
		}
	}
	// uid := "70f6a615-c0d5-4315-a5ac-34ca845450ed"
	id := ctx.param("id")
	if id != "" {
		if editable, _ := community.canEditable(todo, uid, id); !editable {
			xLog.Error("no permissions")
			http.Redirect(ctx.ResponseWriter, ctx.Request, "/error", http.StatusTemporaryRedirect)
		}
		article, _ := community.article(todo, id)
		ctx.yap "edit", article
	}
}

get "/getTrans", ctx => {
	id := ctx.param("id")
	htmlUrl, err := community.transHtmlUrl(todo, id)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(), 
		}
	}
	ctx.json {
		"code": 200,
		"data": htmlUrl,
	}
}

// click "submit" button
post "/commit", ctx => {
	// Whether article has been translated or not
	trans := ctx.param("trans")   // if trans != ""ï¼Œ add article 
	id := ctx.param("id")
	mdData := ctx.param("content")
	htmlData := ctx.param("html")
	// get user id
	token, err := ctx.Request.Cookie("token")
	if err != nil {
		ctx.json {
			"code": 500,
			"err": "no token",
		}
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(),
		}
	}
	// uid := "70f6a615-c0d5-4315-a5ac-34ca845450ed"
	// add article 
	article := &core.Article{
		ArticleEntry: core.ArticleEntry{
			ID: id,
			Title: ctx.param("title"),
			UId:   uid,   
			Cover: ctx.param("cover"),
			Tags:  ctx.param("tags"),
		},
		Content: mdData,
		HtmlData:htmlData,
	}
	id, _ = community.putArticle(todo, uid, trans, article)
	ctx.json {
		"code": 200,
		"data": id,
	}
	// ctx.yap "edit", *article
}

//  click "translate button"
post "/translate", ctx => {
	// get user id
	token, err := ctx.Request.Cookie("token")
	if err != nil {
		ctx.json {
			"code": 500,
			"err": "no token",
		}
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(),
		}
	}
	// uid := "70f6a615-c0d5-4315-a5ac-34ca845450ed"
    mdData := ctx.param("content")
	htmlData := ctx.param("html")
	id := ctx.param("id")
	// get translation markdown
    transData, err := trans.translateMarkdownText(mdData, language.Chinese, language.English)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(),
		}
	}
	id, _ = community.saveHtml(todo, uid, htmlData, mdData, id)
	ctx.json {
		"code": 200,
		"id": id,  //article id
		"data": transData,  // translation markdown content
	}
}

get "/getMedia/:id", ctx => {
	mediaId := ctx.param("id")
	// todo the err not empty return 404 for image
	fileKey, _ := community.GetMediaUrl(context.Background(),mediaId)

	http.Redirect(ctx.ResponseWriter, ctx.Request, domain+fileKey, http.StatusTemporaryRedirect)
}

get "/getMediaUrl/:id",ctx => {
	id := ctx.param("id")
	fileKey, err := community.GetMediaUrl(todo, id)
	htmlUrl := fmt.Sprintf("%s%s", domain, fileKey)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": "have no html media",
		}
	}
	ctx.json {
		"code": 200,
		"url": htmlUrl,
	}
}

post "/upload", ctx => {
	file, header, err := ctx.FormFile("file")
	filename := header.Filename

	ctx.ParseMultipartForm(10 << 20)

	if err != nil {
		xLog.Error("upload file error:", filename)
		ctx.JSON(500, err.Error())
		return
	}


	dst, err := os.Create(filename)
	if err != nil {
		xLog.Error("create file error:", file)
		ctx.JSON(500, err.Error())
		return
	}
	defer func() {
		file.Close()
		dst.Close()
		err = os.Remove(filename)
		if err != nil {
		xLog.Error("delete file error:", filename)
		return
		}
	}()


	_, err = io.Copy(dst, file)
	if err != nil {
		xLog.Error("copy file errer:", filename)
		ctx.JSON(500, err.Error())
		return
	}
	bytes, err := os.ReadFile(filename)
	if err != nil {
		xLog.Error("read file errer:", filename)
		ctx.JSON(500, err.Error())
		return
	}
	token, err := ctx.Request.Cookie("token")
	if err != nil {
		ctx.json {
			"code": 500,
			"err": "no token",
		}
	}
	uid, err := community.ParseJwtToken(token.Value)
	if err != nil {
		ctx.json {
			"code": 500,
			"err": err.Error(),
		}
	}
	id,err:=community.SaveMedia(context.Background(), uid, bytes)
	if err!=nil {
		xLog.Error("save file",err.Error())
		ctx.JSON(500, err.Error())
		return
	}
	// todo append current project ip and getMedia
	// sample: 127.0.0.1:8080/getMedia/ + id
	ctx.JSON(200,id)
}

get "/login", ctx => {
	// Get URL from query string
	// redirectURL := ctx.URL.Query().Get("redirect_url")
	// Get current request page URL from 
	// Concatenate the current request page URL from refer
	redirectURL := fmt.Sprintf("%s/%s", ctx.Request.Referer(), "callback")

	loginURL := community.RedirectToCasdoor(redirectURL)
	ctx.Redirect loginURL, http.StatusFound
}

get "/logout", ctx => {
	tokenCookie, err := ctx.Request.Cookie("token")
	if err != nil {
		xLog.Error("get token error:", err)
	}

	// Delete token
	tokenCookie.MaxAge = -1
	http.SetCookie(ctx.ResponseWriter, tokenCookie)

	// Redirect to home page
	http.Redirect(ctx.ResponseWriter, ctx.Request, fmt.Sprintf("http://localhost:8080"), http.StatusFound)
}

get "/callback", ctx => {
	code :=ctx.URL.Query().Get("code")
	state :=ctx.URL.Query().Get("state")

	token, error := community.GetAccessToken(code, state)
	if error != nil {
		xLog.Error("err",error) // Redirect to login
	}

	cookie := http.Cookie{
		Name: "token",
		Value: token.AccessToken,
		Path: "/",
		MaxAge: 3600,
	}
	http.SetCookie(ctx.ResponseWriter, &cookie)

	// Redirect to home page
	// TODO: Get redirect URL from state
	http.Redirect(ctx.ResponseWriter, ctx.Request, fmt.Sprintf("http://localhost:8080"), http.StatusFound)
}

conf := &core.Config{}
community, _ = core.New(todo, conf)
trans = translation.New(os.Getenv("NIUTRANS_API_KEY"), "", "")
core.CasdoorConfigInit()

// 404
handle "/",ctx => {
	ctx.yap "4xx", {}
}

xLog.Info "Started in endpoint: ", endpoint

// 500
run(endpoint, func(h http.Handler) http.Handler {

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if err := recover(); err != nil {
				http.Redirect(w, r, "/failed", http.StatusFound)
			}
		}()

		h.ServeHTTP(w, r)
	})
})
